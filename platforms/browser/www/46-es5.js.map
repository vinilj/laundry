{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-radio_2-ios.entry.js"],"names":["Radio","hostRef","inputId","radioButtonIds","name","disabled","checked","onFocus","ionFocus","emit","onBlur","ionBlur","onClick","ionDeselect","ionStyle","ionSelect","emitStyle","isChecked","value","undefined","color","el","mode","labelId","label","id","role","Object","assign","type","RadioGroup","radioGroupIds","allowEmptySelection","onSelect","ev","selectedRadio","target","onDeselect","ionChange","updateRadios","header","querySelector","radio","componentOnReady","mutationO","newOption","then","disconnect","getRadios","radios","hasChecked","Promise","all","Array","from","querySelectorAll","map","r","onIonSelect","onIonDeselect"],"mappings":"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","file":"46-es5.js","sourcesContent":["import { r as registerInstance, d as createEvent, c as getIonMode, h, H as Host, e as getElement } from './core-feeeff0d.js';\nimport './config-3c7f3790.js';\nimport { f as findItemLabel } from './helpers-46f4a262.js';\nimport { c as createColorClasses, h as hostContext } from './theme-18cbe2cc.js';\nimport { f as findCheckedOption, w as watchForOptions } from './watch-options-2af96011.js';\n\nconst Radio = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-rb-${radioButtonIds++}`;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot interact with the radio.\n         */\n        this.disabled = false;\n        /**\n         * If `true`, the radio is selected.\n         */\n        this.checked = false;\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.onClick = () => {\n            if (this.checked) {\n                this.ionDeselect.emit();\n            }\n            else {\n                this.checked = true;\n            }\n        };\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.ionSelect = createEvent(this, \"ionSelect\", 7);\n        this.ionDeselect = createEvent(this, \"ionDeselect\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    }\n    colorChanged() {\n        this.emitStyle();\n    }\n    checkedChanged(isChecked) {\n        if (isChecked) {\n            this.ionSelect.emit({\n                checked: true,\n                value: this.value\n            });\n        }\n        this.emitStyle();\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    componentWillLoad() {\n        if (this.value === undefined) {\n            this.value = this.inputId;\n        }\n        this.emitStyle();\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'radio-checked': this.checked,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    render() {\n        const { inputId, disabled, checked, color, el } = this;\n        const mode = getIonMode(this);\n        const labelId = inputId + '-lbl';\n        const label = findItemLabel(el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { onClick: this.onClick, role: \"radio\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": `${checked}`, \"aria-labelledby\": labelId, class: Object.assign(Object.assign({}, createColorClasses(color)), { [mode]: true, 'in-item': hostContext('ion-item', el), 'interactive': true, 'radio-checked': checked, 'radio-disabled': disabled }) }, h(\"div\", { class: \"radio-icon\" }, h(\"div\", { class: \"radio-inner\" })), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"color\": [\"colorChanged\"],\n        \"checked\": [\"checkedChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n    static get style() { return \":host{display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;contain:layout size style}.radio-icon,button{width:100%;height:100%}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color-checked:var(--ion-color-primary,#3880ff);width:15px;height:24px}:host(.ion-color.radio-checked) .radio-inner{border-color:var(--ion-color-base)}.item-radio.item-ios ion-label{margin-left:0}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.item-radio.item-ios ion-label{margin-left:unset;-webkit-margin-start:0;margin-inline-start:0}}.radio-inner{width:33%;height:50%}:host(.radio-checked) .radio-inner{-webkit-transform:rotate(45deg);transform:rotate(45deg);border-width:2px;border-top-width:0;border-left-width:0;border-style:solid;border-color:var(--color-checked)}:host(.radio-disabled){opacity:.3}:host(.ion-focused) .radio-icon:after{border-radius:50%;left:-9px;top:-8px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint,#4c8dff);content:\\\"\\\";opacity:.2}:host-context([dir=rtl]).ion-focused .radio-icon:after,:host-context([dir=rtl]):host(.ion-focused) .radio-icon:after{left:unset;right:unset;right:-9px}:host(.in-item){margin-left:8px;margin-right:11px;margin-top:8px;margin-bottom:8px;display:block;position:static}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:8px;margin-inline-start:8px;-webkit-margin-end:11px;margin-inline-end:11px}}:host(.in-item[slot=start]){margin-left:3px;margin-right:21px;margin-top:8px;margin-bottom:8px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:3px;margin-inline-start:3px;-webkit-margin-end:21px;margin-inline-end:21px}}\"; }\n};\nlet radioButtonIds = 0;\n\nconst RadioGroup = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-rg-${radioGroupIds++}`;\n        this.labelId = `${this.inputId}-lbl`;\n        /**\n         * If `true`, the radios can be deselected.\n         */\n        this.allowEmptySelection = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        this.onSelect = (ev) => {\n            const selectedRadio = ev.target;\n            if (selectedRadio) {\n                this.value = selectedRadio.value;\n            }\n        };\n        this.onDeselect = (ev) => {\n            const selectedRadio = ev.target;\n            if (selectedRadio) {\n                selectedRadio.checked = false;\n                this.value = undefined;\n            }\n        };\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n    }\n    valueChanged(value) {\n        this.updateRadios();\n        this.ionChange.emit({ value });\n    }\n    async connectedCallback() {\n        // Get the list header if it exists and set the id\n        // this is used to set aria-labelledby\n        const el = this.el;\n        const header = el.querySelector('ion-list-header') || el.querySelector('ion-item-divider');\n        if (header) {\n            const label = header.querySelector('ion-label');\n            if (label) {\n                this.labelId = label.id = this.name + '-lbl';\n            }\n        }\n        if (this.value === undefined) {\n            const radio = findCheckedOption(el, 'ion-radio');\n            if (radio !== undefined) {\n                await radio.componentOnReady();\n                if (this.value === undefined) {\n                    this.value = radio.value;\n                }\n            }\n        }\n        this.mutationO = watchForOptions(el, 'ion-radio', newOption => {\n            if (newOption !== undefined) {\n                newOption.componentOnReady().then(() => {\n                    this.value = newOption.value;\n                });\n            }\n            else {\n                this.updateRadios();\n            }\n        });\n        this.updateRadios();\n    }\n    disconnectedCallback() {\n        if (this.mutationO) {\n            this.mutationO.disconnect();\n            this.mutationO = undefined;\n        }\n    }\n    async updateRadios() {\n        /**\n         * Make sure we get all radios first\n         * so values are up to date prior\n         * to caching the radio group value\n         */\n        const radios = await this.getRadios();\n        const { value } = this;\n        let hasChecked = false;\n        // Walk the DOM in reverse order, since the last selected one wins!\n        for (const radio of radios) {\n            if (!hasChecked && radio.value === value) {\n                // correct value for this radio\n                // but this radio isn't checked yet\n                // and we haven't found a checked yet\n                hasChecked = true;\n                radio.checked = true;\n            }\n            else {\n                // this radio doesn't have the correct value\n                // or the radio group has been already checked\n                radio.checked = false;\n            }\n        }\n        // Reset value if\n        if (!hasChecked) {\n            this.value = undefined;\n        }\n    }\n    getRadios() {\n        return Promise.all(Array\n            .from(this.el.querySelectorAll('ion-radio'))\n            .map(r => r.componentOnReady()));\n    }\n    render() {\n        return (h(Host, { role: \"radiogroup\", \"aria-labelledby\": this.labelId, onIonSelect: this.onSelect, onIonDeselect: this.allowEmptySelection ? this.onDeselect : undefined, class: getIonMode(this) }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nlet radioGroupIds = 0;\n\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\n"]}