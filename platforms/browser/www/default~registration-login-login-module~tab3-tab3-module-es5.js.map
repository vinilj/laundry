{"version":3,"sources":["webpack:///node_modules/@ionic-native/ble/__ivy_ngcc__/ngx/index.js"],"names":["BLE","_super","apply","arguments","prototype","scan","services","seconds","startScan","startScanWithOptions","options","stopScan","connect","deviceId","autoConnect","connectCallback","disconnectCallback","requestMtu","mtuSize","refreshDeviceCache","timeoutMillis","disconnect","read","serviceUUID","characteristicUUID","write","value","writeWithoutResponse","startNotification","stopNotification","isConnected","isEnabled","startStateNotifications","stopStateNotifications","showBluetoothSettings","enable","readRSSI","connectedPeripheralsWithServices","peripheralsWithIdentifiers","uuids","bondedDevices","pluginName","plugin","pluginRef","repo","platforms","ɵfac","BLE_Factory","t","ɵBLE_BaseFactory","ɵprov","token","factory","type"],"mappings":"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","file":"default~registration-login-login-module~tab3-tab3-module-es5.js","sourcesContent":["import { __decorate, __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\nimport * as ɵngcc0 from '@angular/core';\nvar BLE = /** @class */ (function (_super) {\n    __extends(BLE, _super);\n    function BLE() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BLE.prototype.scan = function (services, seconds) { return cordova(this, \"scan\", { \"observable\": true }, arguments); };\n    BLE.prototype.startScan = function (services) { return cordova(this, \"startScan\", { \"observable\": true, \"clearFunction\": \"stopScan\", \"clearWithArgs\": false }, arguments); };\n    BLE.prototype.startScanWithOptions = function (services, options) { return cordova(this, \"startScanWithOptions\", { \"observable\": true, \"clearFunction\": \"stopScan\", \"clearWithArgs\": false }, arguments); };\n    BLE.prototype.stopScan = function () { return cordova(this, \"stopScan\", {}, arguments); };\n    BLE.prototype.connect = function (deviceId) { return cordova(this, \"connect\", { \"observable\": true, \"clearFunction\": \"disconnect\", \"clearWithArgs\": true }, arguments); };\n    BLE.prototype.autoConnect = function (deviceId, connectCallback, disconnectCallback) { return cordova(this, \"autoConnect\", { \"sync\": true }, arguments); };\n    BLE.prototype.requestMtu = function (deviceId, mtuSize) { return cordova(this, \"requestMtu\", {}, arguments); };\n    BLE.prototype.refreshDeviceCache = function (deviceId, timeoutMillis) { return cordova(this, \"refreshDeviceCache\", {}, arguments); };\n    BLE.prototype.disconnect = function (deviceId) { return cordova(this, \"disconnect\", {}, arguments); };\n    BLE.prototype.read = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, \"read\", {}, arguments); };\n    BLE.prototype.write = function (deviceId, serviceUUID, characteristicUUID, value) { return cordova(this, \"write\", {}, arguments); };\n    BLE.prototype.writeWithoutResponse = function (deviceId, serviceUUID, characteristicUUID, value) { return cordova(this, \"writeWithoutResponse\", {}, arguments); };\n    BLE.prototype.startNotification = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, \"startNotification\", { \"observable\": true, \"clearFunction\": \"stopNotification\", \"clearWithArgs\": true }, arguments); };\n    BLE.prototype.stopNotification = function (deviceId, serviceUUID, characteristicUUID) { return cordova(this, \"stopNotification\", {}, arguments); };\n    BLE.prototype.isConnected = function (deviceId) { return cordova(this, \"isConnected\", {}, arguments); };\n    BLE.prototype.isEnabled = function () { return cordova(this, \"isEnabled\", {}, arguments); };\n    BLE.prototype.startStateNotifications = function () { return cordova(this, \"startStateNotifications\", { \"observable\": true, \"clearFunction\": \"stopStateNotifications\", \"clearWithArgs\": false }, arguments); };\n    BLE.prototype.stopStateNotifications = function () { return cordova(this, \"stopStateNotifications\", {}, arguments); };\n    BLE.prototype.showBluetoothSettings = function () { return cordova(this, \"showBluetoothSettings\", {}, arguments); };\n    BLE.prototype.enable = function () { return cordova(this, \"enable\", {}, arguments); };\n    BLE.prototype.readRSSI = function (deviceId) { return cordova(this, \"readRSSI\", {}, arguments); };\n    BLE.prototype.connectedPeripheralsWithServices = function (services) { return cordova(this, \"connectedPeripheralsWithServices\", {}, arguments); };\n    BLE.prototype.peripheralsWithIdentifiers = function (uuids) { return cordova(this, \"peripheralsWithIdentifiers\", {}, arguments); };\n    BLE.prototype.bondedDevices = function () { return cordova(this, \"bondedDevices\", {}, arguments); };\n    BLE.pluginName = \"BLE\";\n    BLE.plugin = \"cordova-plugin-ble-central\";\n    BLE.pluginRef = \"ble\";\n    BLE.repo = \"https://github.com/don/cordova-plugin-ble-central\";\n    BLE.platforms = [\"Android\", \"iOS\"];\nBLE.ɵfac = function BLE_Factory(t) { return ɵBLE_BaseFactory(t || BLE); };\nBLE.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BLE, factory: function (t) { return BLE.ɵfac(t); } });\nvar ɵBLE_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(BLE);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(BLE, [{\n        type: Injectable\n    }], null, null); })();\n    return BLE;\n}(IonicNativePlugin));\nexport { BLE };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]}